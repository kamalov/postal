Postal (POST pascAL) programming language

Goal: syntax like TypeScript, compile time speed like Delphi, runtime memory and speed like C++

Priorities (by desc):
1. Typed 
2. Memsafe
3. run time	:: At least C++ runtime performance (speed and memory wise)
4. compile time :: At least Free/Object Pascal compilation speed
5. design time  :: At least TypeScript code writing speed (low friction)

Implementation

Phase zero (basic syntax and type checking):
-- features:
   -- type checking
   -- type inference (variable type and function return type)
   -- C++/Pascal hybrid syntax
   -- built-in dyn array and hash table
   -- only structs (no oop)
-- phase limitations:
   -- transpilation to C++
   -- no memory management
   -- single source file
   -- ansi strings

Phase zero.1:
-- refcounted memory management
-- exceptions
-- ? booleans

Phase one:
-- multiple source files (modules)
-- utf-8 strings
-- generics
-- enums
-- nested arrays
-- function overload
-- better compile error messages

Phase pre-last (bells and whistles):
-- first class functions
-- variant data type
-- IDE support (language server, etc.)
-- semantic block comment (clojure style)

Phase last (most likely will not be needed as transpile to C++ should be enought):
-- for debug mode generate x64 native code (unoptimized) 
-- for production generate LLVM code 
-- debug mode compile speed (cold start) >= 100k loc per second
-- debug mode compile speed (hot) == instant (less than 0.1ms)
-- production mode compile speed >= 10k loc per second
