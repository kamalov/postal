record Lock
    vals: [integer]
end

record Key
    vals: [integer]
end

record Data
    locks: [Lock]
    keys: [Key]
end

function integer_array_to_string(a: [integer]) 
    s = ""
    for a
        if s <> "" then s = s + ","
        s = s + integer_to_string(item)
    end
    return s
end

function process(d: Data, lines: [string])
    chars = string_to_chars(string_array_join(lines, ""))
    vals = [integer]
    if chars[0] = "#"
        for 0..4
            ci = item
            ri = 0 // todo
            for 1..6
                ri = item
                if chars[ri*5+ ci] = "." then break
            end
            array_push(vals, ri - 1)
        end
        lock = Lock {}
        lock.vals = vals
        array_push(d.locks, lock)
    else
        for 0..4
            ci = item
            ri = 5
            loop
                if chars[ri*5 + ci] = "." then break
                ri = ri - 1
            end
            array_push(vals, 5 - ri)
        end
        key = Key {}
        key.vals = vals
        array_push(d.keys, key)
    end
end

function is_match(lock: Lock, key: Key)
    for 0..4
        if lock.vals[item] + key.vals[item] > 5 then return 0
    end
    return 1
end

function run
    lines = read_string_lines_from_file("D:/src/postal/examples/aoc2024/input.txt")
    d = Data {}
    d.locks = [Lock]
    d.keys = [Key]
    b = [string]
    for lines
        if item = ""
            process(d, b)
            b = [string]
        else
            array_push(b, item)
        end
    end

    process(d, b)

    log("locks")
    for d.locks do log(integer_array_to_string(item.vals))

    log("\nkeys")
    for d.keys do log(integer_array_to_string(item.vals))

    total = 0
    for d.locks
        lock = item
        for d.keys
            total = total + is_match(lock, item)
        end
    end

    log("matches", total)
end
