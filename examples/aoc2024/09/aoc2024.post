/// lib array utils
fn len<T>(a: [T]) int external
fn set_array_size<T>(a: [T], new_size: int) external
fn push<T>(a: [T], elem: T) external
fn set_array_value<T>(a: [T], index: int, value: T) external
fn sort_array<T>(a: [T]) external
fn array_contains<T>(a: [T], value: T) int external
fn remove_array_element_at<T>(a: [T], index:int) external

/// lib string utils
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
fn str_contains(s: str, subs: str) int external

/// lib other utils
fn err(s: str) external
fn read_line_from_console() str external   
fn read_string_lines_from_file(filename: str) [str] external

rec FileOrGap {
   id: int
   size: int
   pos: int
}

fn print_file_or_gap_list(vals: [FileOrGap])
   s = ''
   for vals {
      if it.id = 0 {
         v = '.'
      } else {
         v = int_to_str(it.id - 1)
      }
      
      for 1..it.size {
         s = s + v
      }
   }
   log(s)
end

fn print_plains(vals: [int])
   s = ''
   for vals {
      if it = 0 {
         v = '.'
      } else {
         v = int_to_str(it - 1)
      }
      s = s + v
   }
   log(s)
end

rec GapsPosition {
   gaps: [int]
}

fn print_gaps(gaps_by_len: [GapsPosition])
   for gaps_by_len {
      s = int_to_str(idx) + ' -> '
      for it.gaps {
         s = s + ' ' + int_to_str(it)
      }
      log(s)
   }
end

fn get_gaps(items: [FileOrGap]) [GapsPosition]
   gaps_by_len = [GapsPosition]
   for 0..9 {
      g = GapsPosition {}
      g.gaps = [int]
      push(gaps_by_len, g)
   }

   for items {
      if it.id = 0 {
         if it.size > 0 {
            push(gaps_by_len[it.size].gaps, it.pos)
            //break
         }
      }
   }

   ret gaps_by_len
end

fn defrag(items: [FileOrGap], old_plains: [int])
   plains = [int]
   set_array_size(plains, len(old_plains))

   gaps_by_len = get_gaps(items)
   //print_gaps(gaps_by_len)

   fi = len(items) - 1
   count = 0
   loop {
      count = count + 1
      if count % 1000 = 0 {
         log(count)
      }

      if fi < 0 do break
      f = items[fi]
      if f.id = 0 {
         fi = fi - 1
         continue
      }

      min_pos = 1000000
      gap_size = 0
      for (f.size)..9 {
         gaps = gaps_by_len[it].gaps
         if len(gaps) > 0 {
            pos = gaps[0]
            if pos < f.pos and pos < min_pos {
               min_pos = pos
               gap_size = it
            }
         }
      }
      
      if gap_size > 0 {
         gaps = gaps_by_len[gap_size].gaps
         pos = gaps[0]

         remove_array_element_at(gaps, 0)
         diff = gap_size - f.size

         for 0..(f.size - 1)  {
            set_array_value(plains, pos + it, f.id)
         }
         
         if diff > 0 {
            new_gaps = gaps_by_len[diff].gaps
            push(new_gaps, pos + f.size)
            sort_array(new_gaps)
         }
      }

      if gap_size = 0 {
         for 0..(f.size - 1)  {
            set_array_value(plains, f.pos + it, f.id)
         }
      }

      //print_plains(plains)
      // // print_gaps(gaps_by_len)
      //read_line_from_console()

      fi = fi - 1
   }

   ret plains
end

fn process(line: str)
   vals = [FileOrGap]
   is_file = 1
   id = 1
   chars = str_to_chars(line)
   plains = [int]
   pos = 0
   for chars {
      size = str_to_int(it)
      f = FileOrGap {}
      f.pos = pos
      f.size = size
      if is_file {
         f.id = id
         id = id + 1
      } else {
         f.id = 0
      }
      for 1..size {
         push(plains, f.id)
      }
      push(vals, f)
      pos = pos + size
      is_file = is_file = 0
   }

   print_file_or_gap_list(vals)
   print_plains(plains)
   new_plains = defrag(vals, plains)
   print_plains(new_plains)

   total = 0
   for new_plains {
      if it = 0 do continue
      total = total + (it - 1)*idx
   }

   ret total
end

/// main
fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   count = process(lines[0])
   log(count, 'done')
end
