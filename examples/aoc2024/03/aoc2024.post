fn read_lines(filename: str) [str] external
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
// fn sort_int_array(a: [int]) [int] external
fn len<T>(a: [T]) int external

rec Parser {
   current_index: int
   chars: [str]
}

fn get_char_at_index(parser: Parser, index: int)
   if index >= len(parser.chars) do ret ''
   ret parser.chars[index]
end

fn try_skip(p: Parser, s: str) int 
   chars = str_to_chars(s)
   chars >> {
      c = get_char_at_index(p, p.current_index + idx)
      if c <> it do ret 0
   }
   p.current_index = p.current_index + len(chars)
   ret 1
end

fn peek_next(p: Parser) str 
   ret get_char_at_index(p, p.current_index)
end

fn get_next(p: Parser) str 
   s = get_char_at_index(p, p.current_index)
   p.current_index = p.current_index + 1
   ret s
end

fn is_numeric(s: str) int
   if s = '0' or s = '1' or s = '2' or s = '3' or s = '4' or s = '5' or s = '6' or s = '7' or s = '8' or s = '9' {
      ret 1
   }
   ret 0
end

fn get_next_numeric_str(p: Parser) str
   result = ''
   loop {
      s = peek_next(p)
      if is_numeric(s) {
         result = result + s
         get_next(p)
      } else {
         break
      }
   }

   ret result
end

fn get_total(line: str) int 
   p = Parser {}
   p.chars = str_to_chars(line)

   is_on = 1
   total = 0
   loop {
      if peek_next(p) = '' do break
      if try_skip(p, 'do()') {
         is_on = 1
         continue
      } 
      
      if try_skip(p, 'don''t()') {
         is_on = 0
         continue
      }

      if try_skip(p, 'mul(') {
         s1 = get_next_numeric_str(p)

         if s1 = '' do continue
         if try_skip(p, ',') = 0 do continue

         s2 = get_next_numeric_str(p)

         if s2 = '' do continue
         if try_skip(p, ')') = 0 do continue

         v1 = str_to_int(s1)
         v2 = str_to_int(s2)
         v = v1*v2
         log('mul(' + s1 + ',' + s2 + ') = ', v)
         if is_on do total = total + v
      } else {
         s = get_next(p)
      }
   }

   ret total
end

fn run
   lines = read_lines('D:/src/postal/aoc2024/input.txt')

   line = ''
   lines >> {
      line = line + it
   }

   total = get_total(line)

   log('total = ', total)
   log('done')
end
