rec Data {
    ax: int
    ay: int
    bx: int
    by: int
    target_x: int
    target_y: int
}

rec XY {
    x: int
    y: int
}

fn get_xy(s: str) 
    l = str_split(s, ' ')
    x = l[2]
    x = str_remove(x, 'X')
    x = str_remove(x, '+')
    x = str_remove(x, ',')
    y = l[3]
    y = str_remove(y, 'Y')
    y = str_remove(y, '+')

    xy = XY {}
    xy.x = str_to_int(x)
    xy.y = str_to_int(y)

    ret xy
end

fn create_data(lines: [str], index: int)
    data = Data {}

    xy = get_xy(lines[index])
    data.ax = xy.x
    data.ay = xy.y

    xy = get_xy(lines[index + 1])
    data.bx = xy.x
    data.by = xy.y

    l = str_split(lines[index + 2], ' ')
    x = l[1]
    x = str_remove(x, 'X')
    x = str_remove(x, '=')
    x = str_remove(x, ',')

    y = l[2]
    y = str_remove(y, 'Y')
    y = str_remove(y, '=')
    data.target_x = str_to_int(x) + 10000000000000
    data.target_y = str_to_int(y) + 10000000000000

    ret data
end

fn process_data(d: Data)
    // log(d.ax, d.ay)
    // log(d.bx, d.by)
    // log(d.target_x, d.target_y)

    b_up = d.ax*d.target_y - d.ay*d.target_x
    b_down = d.ax*d.by - d.ay*d.bx
    b = b_up/b_down

    a_up = d.target_x - b*d.bx
    a_down = d.ax
    a = a_up/a_down

    if a_up % a_down <> 0 or b_up % b_down <> 0 do ret 0

    //if a > 100 or b > 100 do ret 0

    price = a*3 + b 
    log('price', price)
    ret price
end

fn process(lines: [str])
    total = 0
    for 0..len(lines)/4 {
        index = it*4
        data = create_data(lines, index)
        total = total + process_data(data)
    }
    ret total
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   total = process(lines)

   log('total = ', total)
end
