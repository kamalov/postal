rec Int_Array {
    values: [int]
}

fn clone_int_array(arr: Int_Array)
    r = Int_Array {}
    r.values = [int]
    for arr.values do push(r.values, it)
    ret r
end

rec Graph {
    names: [str]
    vertex_names_to_index: #[str, int]
    edges: #[int, Int_Array]
    cons: [Int_Array]
    matrix: [int]
}

fn set_matrix(g: Graph, a: int, b: int, v: int)
    g.matrix[a*1000 + b] = v
end

fn get_matrix(g: Graph, a: int, b: int)
    ret g.matrix[a*1000 + b]
end

fn vals_to_str(g: Graph, vals: [int])
    s = ''
    for vals {
        if s <> '' do s = s + ','
        s = s + g.names[it]
    }
    ret s
end

fn ensure_vertex(g: Graph, vertex_name: str)
    if map_has_key(g.vertex_names_to_index, vertex_name) do ret map_get_value(g.vertex_names_to_index, vertex_name)
    index = len(g.names)
    push(g.names, vertex_name)
    map_add(g.vertex_names_to_index, vertex_name, index)
    ret index
end

fn add_vertex_edge(g: Graph, a: int, b: int)
    if map_has_key(g.edges, a) {
        to = map_get_value(g.edges, a)
        push(to.values, b)
    } else {
        to = Int_Array {}
        to.values = [int]
        push(to.values, b)
        map_add(g.edges, a, to)
    }
end

fn add_edge(g: Graph, s1: str, s2: str)
    a = ensure_vertex(g, s1)
    b = ensure_vertex(g, s2)
    set_matrix(g, a, b, 1)
    set_matrix(g, b, a, 1)
    add_vertex_edge(g, a, b)
    add_vertex_edge(g, b, a)
end

fn next_cons(g: Graph)
    result = [Int_Array]
    for g.cons {
        con = it
        for arr_last(con.values)..len(g.names) - 1 {
            candidate = it
            is_valid = 1
            for con.values {
                if get_matrix(g, it, candidate) = 0 {
                    is_valid = 0
                    break
                }
            }
            if is_valid {
                new_con = clone_int_array(con)
                push(new_con.values, candidate)
                push(result, new_con)
            }
        }
    }
    ret result
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    g = Graph {}
    g.names = [str]
    g.vertex_names_to_index = #[str, int]
    g.edges = #[int, Int_Array]
    g.cons = [Int_Array]
    g.matrix = [int]
    arr_set_len(g.matrix, 1000000)

    for lines {
        p = str_split(it, '-')
        add_edge(g, p[0], p[1])
    }

    for g.names {
        a = Int_Array {}
        a.values = [int]
        push(a.values, idx)
        push(g.cons, a)
    }

    for 1..13 {
        next = next_cons(g)
        log('rank', it, 'count', len(next))
        if len(next) = 0 do break
        g.cons = next
    }

    vals = g.cons[0].values
    sa = [str]
    for vals do push(sa, g.names[it])
    arr_sort(sa)
    s = str_arr_join(sa, ',')

    log('done', len(vals), vals_to_str(g, vals))
    log('done', len(vals), s)
end
