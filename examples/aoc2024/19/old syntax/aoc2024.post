rec Part {
    vals: [int]
}

rec Data {
    parts: [Part]
}

fn str_to_int_array(s: str)
    r = [int]
    chars = str_to_chars('bgruw')
    for str_to_chars(s) {
        i = arr_index_of(chars, it)
        push(r, i)
    }
    ret r
end

fn int_array_to_str(p: [int])
    chars = str_to_chars('bgruw')
    s = ''
    for p do s = s + chars[it]
    ret s
end

fn parse_parts(line: str)
    s = str_remove(line, ' ')
    a = str_split(s, ',')
    arr_sort(a)
    parts = [Part]
    for a {
        p = Part {}
        p.vals = str_to_int_array(it)
        push(parts, p)
    }
    ret parts
end

fn matches(target: [int], index: int, v: [int])
    for v {
        i = index + idx
        if i >= len(target) do ret 0
        if it <> target[i] do ret 0
    }
    ret 1
end

rec Counter {
    count: int
    lines: [str]
    visited: [int]
}

fn check(d: Data, target: [int], index: int, counter: Counter, s: str) int
    r = 0
    if index >= len(target) {
        counter.count = counter.count + 1
        //log('found', s)
        ret 1
    }
    for d.parts {
        p = it.vals
        if matches(target, index, p) {
            //log('matches', index, int_array_to_str(p))
            i = index*1000 + idx
            v = counter.visited[i]
            if v = 0-1 do continue
            ns = s + ', ' + int_array_to_str(p)
            if v > 0 {
                r = r + v
            } else {
                v = check(d, target, index + len(p), counter, ns)
                if v > 0 {
                    counter.visited[i] = v
                    r = r + v
                } else {
                    counter.visited[i] = 0-1
                }
            }
        }
    }
    ret r
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    d = Data {}
    d.parts = parse_parts(lines[0])
    
    for d.parts {
        log(int_array_to_str(it.vals))
    }
    log()

    i = arr_index_of(lines, '')
    lines = arr_slice(lines, i + 1, len(lines))
    total = 0
    for lines {
        target = str_to_int_array(it)
        log(it)
        c = Counter {}
        c.lines = [str]
        c.visited = [int]
        arr_set_len(c.visited, 1000000)
        r = check(d, target, 0, c, '')
        log(r)
        //total = total + c.count
        total = total + r

        //for c.visited do log(it)
    }
    log('total', total)
end
