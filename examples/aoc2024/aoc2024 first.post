rec Expr {
    left: str
    op: str
    right: str
}

rec Registers {
    values: #[str, int]
    ops: #[str, Expr]
}

fn calc(r: Registers, reg: str) int
    if map_has_key(r.values, reg) do ret map_get_value(r.values, reg)

    expr = map_get_value(r.ops, reg)
    left = calc(r, expr.left)
    right = calc(r, expr.right)
    if expr.op = 'OR' do v = left or right
    if expr.op = 'AND' do v = left and right
    if expr.op = 'XOR' do v = left xor right
    map_add(r.values, reg, v)
    
    ret v
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    i = arr_index_of(lines, '')
    data = arr_slice(lines, 0, i - 1)
    ops = arr_slice(lines, i + 1, len(lines))

    r = Registers {}
    r.values = #[str, int]
    r.ops = #[str, Expr]

    for data {
        p = str_split(it, ': ')
        map_add(r.values, p[0], str_to_int(p[1]))
    }
    
    for ops {
        p = str_split(it, ' -> ')
        reg = arr_last(p)
        p = str_split(p[0], ' ')
        e = Expr {}
        e.left = p[0]
        e.op = p[1]
        e.right = p[2]
        map_add(r.ops, reg, e)
    }

    // keys = map_keys(r.ops)
    // arr_sort(keys)
    // for keys {
    //     e = map_get_value(r.ops, it)    
    //     s = e.left + ' ' + e.op + ' ' + e.right
    //     log(it, s)
    // }

    for 0..99 {
        if it = 0 {
            key = 'z00'
        } else if it < 10 {
            key = 'z0' + int_to_str(it)
        } else {
            key = 'z' + int_to_str(it)
        }
        if map_has_key(r.ops, key) = 0 do break
        calc(r, key)
    }

    keys = map_keys(r.values)
    arr_sort(keys)
    res = 0
    for keys {
        if map_has_key(r.values, it) {
            v = map_get_value(r.values, it)
            log(it, v)
        } else {
            log(it, 'none')
        }
        if str_to_chars(it)[0] = 'z' {
            zi = str_to_int(str_remove(it, 'z'))
            if v = 1 {
                a = 1 lshift zi
                res = res + a
            }
        }
    }


    log('done', res)
end
