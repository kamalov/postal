/// lib array utils
fn len<T>(a: [T]) int external
fn set_array_size<T>(a: [T], new_size: int) external
fn push<T>(a: [T], elem: T) external
fn set_array_value<T>(a: [T], index: int, value: T) external
fn sort<T>(a: [T]) external
fn array_contains<T>(a: [T], value: T) int external

/// lib string utils
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
fn str_contains(s: str, subs: str) int external

/// lib other utils
fn err(s: str) external
fn read_line() str external   
fn read_string_lines_from_file(filename: str) [str] external

/// main
rec Row {
   cols: [str]
}

rec Field {
   rows: [Row]
   max_rows_index: int
   max_cols_index: int
   current_dir: str
   ri: int
   ci: int
}

fn clone_field(f: Field) 
   nf = Field {}
   nf.max_rows_index = f.max_rows_index
   nf.max_cols_index = f.max_cols_index
   nf.current_dir = f.current_dir
   nf.ri = f.ri
   nf.ci = f.ci

   nf.rows = [Row]
   for f.rows {
      it_row = it
      row = Row {}
      row.cols = [str]
      for it_row.cols {
         push(row.cols, it)
      }
      push(nf.rows, row)
   }

   ret nf
end

fn init_field(lines: [str])
   field = Field {}
   field.rows = [Row]
   for lines {
      row_index = idx
      row = Row {}
      row.cols = [str]
      row.cols = str_to_chars(it)
      for row.cols {
         if it = '<' or it = '>' or it = '^' or it = 'v' {
            field.ri = row_index
            field.ci = idx
            field.current_dir = it
         }
      }
      push(field.rows, row)
   }
   field.max_rows_index = len(field.rows) - 1 
   field.max_cols_index = len(field.rows[0].cols) - 1
   
   ret field
end

fn print_field(field: Field)
   for field.rows {
      s = ''
      cols = it.cols
      for cols do s = s + ' ' + it
      log(s)
   }
   log()
end

fn get_field_value(f: Field, ri: int, ci: int)
   if ri < 0 or ci < 0 or ri > f.max_rows_index or ci > f.max_cols_index do ret ''
   ret f.rows[ri].cols[ci]
end

fn add_field_cell_dir(f: Field, ri: int, ci: int, dir: str)
   v = f.rows[ri].cols[ci]
   if str_contains(v, dir) = 0 {
      v = v + dir
      set_array_value(f.rows[ri].cols, ci, v)
   }
end

rec Delta {
   dr: int
   dc: int
}

fn get_delta(dir: str)
   d = Delta {}
   d.dr = 0
   d.dc = 0
   if dir = '^' {
      d.dr = 0-1
   } else if dir = 'v' {
      d.dr = 1
   } else if dir = '>' { 
      d.dc = 1
   } else if dir = '<' {
      d.dc = 0-1
   }
   ret d
end

fn rotate(dir: str)
   if dir = '^' do ret '>'
   if dir = '>' do ret 'v'
   if dir = 'v' do ret '<'
   if dir = '<' do ret '^'
   err('wrong rotate ' + dir)
end

fn can_find_exit_without_check(f: Field)
   loop {
      d = get_delta(f.current_dir)
      next_ri = f.ri + d.dr
      next_ci = f.ci + d.dc
      next_cell_value = get_field_value(f, next_ri, next_ci)

      if next_cell_value = '' {
         ret 1
      } 
      
      if next_cell_value = '#' {
         f.current_dir = rotate(f.current_dir)
      } else {
         if str_contains(next_cell_value, f.current_dir) {
            ret 0
         }
         f.ri = next_ri
         f.ci = next_ci
      }

      add_field_cell_dir(f, f.ri, f.ci, f.current_dir)
   }
end

fn try_obstacle_loop(f: Field, ri: int, ci: int) 
   nf = clone_field(f)
   set_array_value(nf.rows[ri].cols, ci, '#')
   is_loop = can_find_exit_without_check(nf) = 0
   ret is_loop
end

fn can_find_exit(f: Field)
   possible_obstacles_count = 0
   loop {
      d = get_delta(f.current_dir)
      next_ri = f.ri + d.dr
      next_ci = f.ci + d.dc
      next_cell_value = get_field_value(f, next_ri, next_ci)

      if next_cell_value = '' {
         ret possible_obstacles_count
      } 
      
      if next_cell_value = '#' {
         f.current_dir = rotate(f.current_dir)
         add_field_cell_dir(f, f.ri, f.ci, f.current_dir)
      } else {
         if str_contains(next_cell_value, f.current_dir) {
            err('loop, shouldn''t  be')
         }
         if next_cell_value = '.' and try_obstacle_loop(f, next_ri, next_ci) {
            log(possible_obstacles_count, 'loop at obstacle', next_ri, next_ci)
            possible_obstacles_count = possible_obstacles_count + 1
            //print_field(f)
            //read_line()
         }
         f.ri = next_ri
         f.ci = next_ci
         add_field_cell_dir(f, f.ri, f.ci, f.current_dir)
      }
   }
end

fn count_visited(f: Field)
   count = 0
   for 0..f.max_rows_index {
      ri = idx
      for 0..f.max_cols_index {
         v = get_field_value(f, ri, idx)
         if v = '#' or v = '.' do continue
         count = count + 1
      }
   }
   ret count
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')

   field = init_field(lines)
//   print_field(field)

   possible_obstacles_count = can_find_exit(field)
   
//   print_field(field)

   log(count_visited(field), 'visited')
   log(possible_obstacles_count, 'obstacles')
end
