record Expr
    left: string
    op: string
    right: string
    reg: string
end

record Data
    values: #[string, integer]
    exprs: [Expr]
    mappings: [string]
end

function int_to_str_padded(i: integer)
    r = integer_to_string(i)
    if i < 10 then r = "0" + r
    return r
end

function starts_with(s: string, a: string)
    return string_to_chars(s)[0] = a
end

function expr_to_str(e: Expr)
    return e.op + ": " + e.left + " " + e.op + " " + e.right + " -> " + e.reg
end

function wrap_reg(s: string)
    a = string_to_chars(s)[0]
    if a = "x" or a = "y" or a = "z" then return s
    return "_" + s
end

function create_data(lines: [string])
    r = Data {}
    r.values = #[string, integer]
    r.exprs = [Expr]
    r.mappings = [string]
    
    for lines
        e = Expr {}
        p = string_split(item, " -> ")
        e.reg = array_last(p)
        p = string_split(p[0], " ")
        e.left = p[0]
        e.op = p[1]
        e.right = p[2]
        if starts_with(e.left, "y")
            t = e.left
            e.left = e.right
            e.right = t
        end
        e.left = wrap_reg(e.left)
        e.right = wrap_reg(e.right)
        e.reg = wrap_reg(e.reg)
        array_push(r.exprs, e)
    end

    return r
end

function update_reg(d: Data, from: string, to: string)
    array_push(d.mappings, to + " <- " + from)
    for d.exprs
        e = item
        if e.left = from
            e.left = to
        end
        if e.right = from
            //log(from)
            e.right = e.left
            e.left = to
        end
        if e.reg = from and not starts_with(e.reg, "z")
            e.reg = to
        end
    end
end

function update_regs(d: Data)
    for d.exprs
        if starts_with(item.left, "x")
            i = string_to_integer(string_remove(item.left, "x"))
            if item.op = "xor"
                new_reg = "sum_half_" + int_to_str_padded(i)
                update_reg(d, item.reg, new_reg)
            end
            if item.op = "and"
                new_reg = "carry_half_" + int_to_str_padded(i)
                update_reg(d, item.reg, new_reg)
            end
        end
    end
end

function run
    lines = read_string_lines_from_file("D:/src/postal/examples/aoc2024/24/input.txt")
    d = create_data(lines)
    update_regs(d)
    out = [string]
    for d.exprs do array_push(out, expr_to_str(item))
    array_quick_sort(out)
    for out do log(item)

    array_quick_sort(d.mappings)
    log("\nmappings\n")
    for d.mappings do log(item)
    log("done 1")
end
