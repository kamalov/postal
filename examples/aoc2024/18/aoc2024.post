rec Coords {
    ri: int
    ci: int
}

fn new_coords(ri: int, ci: int)
    c = Coords {}
    c.ri = ri
    c.ci = ci
    ret c
end

rec IntField {
   row_count: int
   col_count: int
   values: [int]
}

fn create_int_field(row_count: int, col_count: int)
   f = IntField {}
   f.row_count = row_count
   f.col_count = col_count
   f.values = [int]
   arr_set_len(f.values, row_count * col_count)
   ret f
end

fn get_int_field_value(f: IntField, row_index: int, col_index: int) int
   ret f.values[row_index*f.col_count + col_index]
end

fn set_int_field_value(f: IntField, row_index: int, col_index: int, value: int)
   f.values[row_index*f.col_count + col_index] = value
end

fn is_valid_field_index(f: IntField, row_index: int, col_index: int)
   ret row_index >= 0 and row_index < f.row_count and col_index >= 0 and col_index < f.col_count
end

fn get_count(f: IntField)
    count = 0
    for 0..f.row_count - 1 {
        ri = it
        for 0..f.col_count - 1 {
            ci = it
            v = get_int_field_value(f, ri, ci)
            if v > 0 do count = count + 1
        }
    }
    ret count
end

fn int_to_char(i: int) 
    if i = 0 do ret '.'
    if i = 0-1 do ret '#'
    err('int_to_char')
end

rec Data {
    f: IntField
    visited: IntField
    weights: IntField
    visited_by_steps: [Coords]
    fallen: #[int, int]
    min_len: int
    count: int
}

fn print_int_field(d: Data, step: int)
    f = d.f
    for 0..(f.row_count - 1) {
        ri = it
        s = ''
        for 0..(f.col_count - 1) {
            ci = it
            v = get_int_field_value(f, ri, ci)
            if v = 0-1 {
                fv = map_get_value(d.fallen, ri*1000 + ci)
                ns = '/'
                // if fv <= step {
                //     ns = '#'
                // } else {
                //     if get_int_field_value(d.visited, ri, ci) {
                //         ns = 'O'
                //     } else {
                //         ns = '?'
                //     }
                // }
            } 

            if v = 0 {
                if get_int_field_value(d.visited, ri, ci) {
                    ns = 'O'
                } else {
                    ns = '.'
                }
            }

            s = s + ns
        }
        log(s)
    }
    log()
end

fn create_field(lines: [str], size: int, steps: int)
    f = create_int_field(size, size)
    fallen = #[int, int]
    visited_by_steps = [Coords]
    push(visited_by_steps, new_coords(1000, 1000))
    weights = create_int_field(size, size)
    i = 0
    for lines {
        i = i + 1
        if i > steps do break
        p = str_split(it, ',')
        ci = str_to_int(p[0])
        ri = str_to_int(p[1])
        map_add(fallen, ri*1000 + ci, idx + 1)
        set_int_field_value(f, ri, ci, 0-1)
        //set_int_field_value(weights, ri, ci, ri + ci)
        push(visited_by_steps, new_coords(ri, ci))
    }
    d = Data {}
    d.f = f
    d.visited = create_int_field(size, size)
    d.weights = weights
    d.visited_by_steps = visited_by_steps
    d.fallen = fallen
    d.min_len = 1000000
    ret d
end

fn is_fallen(d: Data, ri: int, ci: int, step: int)
    key = ri*1000 + ci
    //if map_has_key(d.fallen, key) do ret map_get_value(d.fallen, key) <= step
    ret map_has_key(d.fallen, key)
end

fn next(d: Data, ri: int, ci: int, step: int)
    rest = d.f.row_count - ri - 1 + d.f.col_count - ci - 1
    if step + rest > d.min_len {
        // log(ri, ci)
        // print_int_field(d, step)
        // readln()
        ret
    }

    if is_valid_field_index(d.f, ri, ci) = 0 do ret
    if is_fallen(d, ri, ci, step) do ret
    v = get_int_field_value(d.f, ri, ci)
    
    // if step > 0 {
    //     c = d.visited_by_steps[step]
    //     if get_int_field_value(d.visited, c.ri, c.ci) do ret
    // }

    if ri = d.f.row_count - 1 and ci = d.f.col_count - 1 {
        if step < d.min_len {
            d.min_len = step
            //print_int_field(d, step)
            //log(step)
            //readln()
        }
        ret
    }

    if get_int_field_value(d.visited, ri, ci) do ret
    
    w = get_int_field_value(d.weights, ri, ci)
    if w = 0 or step < w {
        set_int_field_value(d.weights, ri, ci, step)
    } else {
        //log('if w >= step', w, step)
        ret
    }

    set_int_field_value(d.visited, ri, ci, 1)
    d.count = d.count + 1
    //if d.count mod 1000000 = 0 {
        //log(d.count)
        //log(step)
        //print_int_field(d, step)
        //readln()
    //}

    next(d, ri, ci + 1, step + 1)
    next(d, ri + 1, ci, step + 1)
    next(d, ri, ci - 1, step + 1)
    next(d, ri - 1, ci, step + 1)

    set_int_field_value(d.visited, ri, ci, 0)
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    //d = create_field(lines, 7, 12)
    d = create_field(lines, 71, 1024)
    
    //print_int_field(d, 0)
    i = len(lines)
    //i = 1024
    loop {
        i = i - 1
        d = create_field(lines, 71, i)
        next(d, 0, 0, 0)
        log('falls count', i, 'min_len', d.min_len)
        if d.min_len <> 1000000 { 
            log(lines[i])
            break
        }
        //readln()
    }

    //log('done', d.min_len)
end
