rec Lock {
    vals: [int]
}

rec Key {
    vals: [int]
}

rec Data {
    locks: [Lock]
    keys: [Key]
}

fn int_array_to_str(a: [int]) 
    s = ''
    for a {
        if s <> '' do s = s + ','
        s = s + int_to_str(it)
    }
    ret s
end

fn process(d: Data, lines: [str])
    chars = str_to_chars(str_arr_join(lines, ''))
    vals = [int]
    if chars[0] = '#' {
        for 0..4 {
            ci = it
            for 1..6 {
                ri = it
                if chars[ri*5+ ci] = '.' do break
            }
            push(vals, ri - 1)
        }
        lock = Lock {}
        lock.vals = vals
        push(d.locks, lock)
    } else {
        for 0..4 {
            ci = it
            ri = 5
            loop {
                if chars[ri*5 + ci] = '.' do break
                ri = ri - 1
            }
            push(vals, 5 - ri)
        }
        key = Key {}
        key.vals = vals
        push(d.keys, key)
    }
end

fn is_match(lock: Lock, key: Key)
    for 0..4 {
        if lock.vals[it] + key.vals[it] > 5 do ret 0
    }
    ret 1
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    d = Data {}
    d.locks = [Lock]
    d.keys = [Key]
    b = [str]
    for lines {
        if it = '' {
            process(d, b)
            b = [str]
        } else {
            push(b, it)
        }
    }
    process(d, b)
    log('locks')
    for d.locks do log(int_array_to_str(it.vals))

    log('\nkeys')
    for d.keys do log(int_array_to_str(it.vals))

    total = 0
    for d.locks {
        lock = it
        for d.keys {
            total = total + is_match(lock, it)
        }
    }

    log('matches', total)
end
