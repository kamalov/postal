/// lib array utils
fn len<T>(a: [T]) int external
fn set_array_size<T>(a: [T], new_size: int) external
fn push<T>(a: [T], elem: T) external
fn set_array_value<T>(a: [T], index: int, value: T) external
fn sort<T>(a: [T]) external
fn array_contains<T>(a: [T], value: T) int external

/// lib string utils
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
fn str_contains(s: str, subs: str) int external

/// lib other utils
fn err(s: str) external
fn read_line_from_console() str external   
fn read_string_lines_from_file(filename: str) [str] external

/// main
rec Row {
   cols: [str]
}

rec Field {
   rows: [Row]
   max_rows_index: int
   max_cols_index: int
   ri: int
   ci: int
}

fn clone_field(f: Field) 
   nf = Field {}
   nf.max_rows_index = f.max_rows_index
   nf.max_cols_index = f.max_cols_index
   nf.ri = f.ri
   nf.ci = f.ci

   nf.rows = [Row]
   for f.rows {
      row = Row {}
      row.cols = [str]
      for it.cols {
         push(row.cols, it)
      }
      push(nf.rows, row)
   }

   ret nf
end

fn init_field(lines: [str])
   field = Field {}
   field.rows = [Row]
   for lines {
      row_index = idx
      row = Row {}
      row.cols = [str]
      row.cols = str_to_chars(it)
      push(field.rows, row)
   }
   field.max_rows_index = len(field.rows) - 1 
   field.max_cols_index = len(field.rows[0].cols) - 1
   
   ret field
end

fn print_field(field: Field)
   for field.rows {
      s = ''
      for it.cols do s = s + ' ' + it
      log(s)
   }
   log()
end

fn get_field_value(f: Field, ri: int, ci: int)
   if ri < 0 or ci < 0 or ri > f.max_rows_index or ci > f.max_cols_index do ret ''
   ret f.rows[ri].cols[ci]
end

fn try_set_field_value(f: Field, ri: int, ci: int, value: str)
   if ri < 0 or ci < 0 or ri > f.max_rows_index or ci > f.max_cols_index do ret 0
   f.rows[ri].cols[ci] = value
   ret 1
end

rec FieldCell {
   v: str
   ri: int
   ci: int
}

fn get_cells(f: Field)
   cells = [FieldCell]
   for f.rows {
      ri = idx
      for it.cols {
         fc = FieldCell {}
         fc.v = it
         fc.ri = ri
         fc.ci = idx
         push(cells, fc)
      } 
   }
   ret cells
end

fn set_anti(af: Field, c1: FieldCell, c2: FieldCell) 
   dr = c2.ri - c1.ri
   dc = c2.ci - c1.ci
   //log('dr:', dr, 'dc:' + dc)
   ri = c1.ri
   ci = c1.ci
   loop {
      ri = ri - dr
      ci = ci - dc
      if try_set_field_value(af, ri, ci, '#') = 0 do break
   }

   ri = c2.ri
   ci = c2.ci
   loop {
      ri = ri + dr
      ci = ci + dc
      if try_set_field_value(af, ri, ci, '#') = 0 do break
   }
end

fn count_anti(f: Field)
   af = clone_field(f)
   cells = get_cells(f)
   for 0..(len(cells) - 2) {
      c1 = cells[it]
      //s = int_to_str(it) + ' -> '
      for (it + 1)..(len(cells) - 1) {
         c2 = cells[it]
         if c1.v <> '.' and c1.v = c2.v {
            set_anti(af, c1, c2)
            //log(c1.ri, c1.ci, c2.ri, c2.ci)
            // print_field(f)
            // print_field(af)
            // read_line_from_console()
         }
         //s = s + int_to_str(it) + ', '
      }
      //log(s)
   }

   total = 0
   print_field(af)
   for af.rows {
      for it.cols {
         if it <> '.' do total = total + 1
      } 
   }
   ret total
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')

   field = init_field(lines)
   print_field(field)
   
   count = count_anti(field)
   log(count, 'done')
end
