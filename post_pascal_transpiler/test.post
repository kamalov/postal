//fn push<T>(a: [T], elem: T) external
fn array_contains<T>(a: [T], value: T) int external
fn push<T>(a: [T], elem: T) external

rec A {
   a: int
   b: str
}

// friend bool operator==(const A& lhs, const A& rhs) {
//     //return lhs.a == rhs.a && lhs.b == rhs.b;
//     return lhs.a == rhs.a;
// }

fn run
   a = A {}
   a.a = 5
   a.b = '5'
   b = A {}
   b.a = 5
   b.b = '6'
   arr = [A]
   push(arr, a)
   c = array_contains(arr, b)
   log(c)

   a1 = [str]
   push(a1, 'test')
   c = array_contains(a1, 'test')
   log(c)
end

   //  if (std::is_pointer<T>::value) {
   //      printf("is pointer\n");
	// //return true;
   //      return std::find_if(a->begin(), a->end(), [value](T item) { return deref(item) == deref(value); }) != a->end();
   //  } else {
   //      printf("is NOT pointer\n");
   //      return std::find(a->begin(), a->end(), value) != a->end();
   //  }

/// c++ voodoo magic trait spells
// template <typename T>
// auto deref_trait(T arg) -> std::enable_if_t<std::is_pointer<T>::value, std::remove_pointer_t<T>> {
//     return *arg;
// }

// template <typename T>
// auto deref_trait(T arg) -> std::enable_if_t<!std::is_pointer<T>::value, T> {
//     return arg;
// }

