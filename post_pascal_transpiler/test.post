fn add<K, V>(hashmap: #[K, V], key: K, value: V) external
fn has<K, V>(hashmap: #[K, V], key: K) int external
//fn get<K, V>(map: #[K, V], key: K) V external

rec A {
   a: int
   b: str
}

fn run
   amap = #[A, int]
   key = A {}
   key.a = 1
   key.b = 'b'
   add(amap, key, 1)
   log(has(amap, key))
   //key = A {}
   key.a = 2
   key.b = 'b'
   log(has(amap, key))
   // add(a, 'one', 1)
   // add(a, 'two', 2)
   // b = get(a, 'one')
   // log(b)
end
