function test_multiple_params(a: integer, b: real)
    x = a + 1.1
    log(a, b, '  ->  ', x)
end

function test_if
    a = 5
    if a < 0 {
        log('a < 0')
    } 
    else if a > 10 {
        log('a > 10')
    } 
    else {
        log('a >= 0 and <= 10')
        log(a + 10)
    }
end

function test_loop
    i = 0
    loop {
        i = i + 1
        log(i)
        if i = 10 {
            break
        }
        if i > 5 do break
    }
end

function test_iterator
    numbers = [integer]
    push(numbers, 123)
    push(numbers, 456)
    push(numbers, 789)

//    for numbers {
        // log(index) 
        // log('numbers ', index, ' ', item) 
        // for numbers do log('    ', index, ' ', item) 
        // log('<< ', index, ' ', item) 
//    }
end

function test_params1(a: integer, b: integer) integer
    return a + b
end

function test_params
    b = 5 + 6 + 7*test_params1(5, 6)
    log(b)
    b = test_params1(test_params1(5, 6), 6)
    log(b)
end

function test_array_access
    numbers = [real]
    push(numbers, 123.0)
    push(numbers, 456.0)
    push(numbers, 789.0)

    for numbers do log(numbers[index])        
end

record Coordinates
    x: real
    y: integer
end

function test_records 
    r = Coordinates {}
    r.x = 10 + 10
    r.y = 20
    log(r.x)
    log(r.y)
    a = r.x*r.y
    log(r.x*r.y)
    log(a)
    log(r.x*r.y = a)
end

function test_strings
    s = '123'
    ss = 'abc'
    sss = s + ' ' + ss
    log(sss)
end

function read_lines(filename: string) [string] external

function test_read_lines
    lines = read_string_lines_from_file('d:/test.txt')
    for lines do log(index, item)
end

function run
    test_multiple_params(5, 6.0)
    test_if()
    test_loop()
    test_iterator()
    test_array_access()
    test_records()
    test_strings()
    //test_read_lines()
    log('done')
end
