rec A {
     v: int
}

fn test_equals
    a = A {}
    a.v = 5
    b = A {}
    b.v = 5
    log('test equals', a = b)
end

fn test_array
    aa = [A]
    a = A {}
    a.v = 5
    push(aa, a)
    b = A {}
    b.v = 5
    push(aa, b)
    log('object array contains A {v: 5} =', arr_contains(aa, b))
    log('object array len =', len(aa))
    log('object array first elem v field value =', aa[0].v)
    a.v = 6
    log('object array contains A {v: 6} =', arr_contains(aa, a))
    log('object array contains A {v: 5} =', arr_contains(aa, b))
    slice = arr_slice(aa, 0, 0)
    log('arr slice first elem value', slice[0].v)
end

fn test_map
    i = #[int, int]
    map_add(i, 1, 10)
    map_add(i, 2, 11)
    log('test simple map get value', map_get_value(i, 1))

    m = #[A, int]
    a = A {}
    a.v = 5
    map_add(m, a, 15)
    b = A {}
    b.v = 5
    log('test shared map get value', map_get_value(m, b))
    a.v = 6
    log('test shared map has key', map_has_key(m, a))
    for map_keys(i) do log('simple map key', idx, it)
    for map_keys(m) do log('shared map key', idx, it.v)
end

fn test_str
    s = '1 2 3'
    a = [str]
    for str_split(s, ' ') {
        push(a, it)
        log(s, 'split', it)
    }
    log('str_arr_join', str_arr_join(a, ' + '))
end

fn test_size
    arr = [A]
    arr_set_len(arr, 1000000)
    i = 0
    log('arr set')
    readln()
    loop {
        if i = len(arr) do break 
        a = A {}
        a.v = i
        arr[i] = a
        i = i + 1
    }
end

fn run
    // test_equals()
    // test_array()
    // test_map()
    // test_str()
    i = 0
    loop {
        i = i + 1
        test_size()
        log(i)
        readln()
        if i = 1000 do break
    }
    readln()
end
