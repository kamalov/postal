/// lib array utils
fn len<T>(a: [T]) int external
fn set_array_size<T>(a: [T], new_size: int) external
fn push<T>(a: [T], elem: T) external
fn set_array_value<T>(a: [T], index: int, value: T) external
fn sort<T>(a: [T]) external
fn array_contains<T>(a: [T], value: T) int external

/// lib string utils
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
fn str_contains(s: str, subs: str) int external

/// lib other utils
fn err(s: str) external
fn read_line_from_console() str external   
fn read_string_lines_from_file(filename: str) [str] external

/// main
rec Data {
   target: int
   values: [int]
}

fn lines_to_datas(lines: [str]) [Data]
   datas = [Data]
   for lines {
      data = Data {}
      data.values = [int]
      parts = split_str(it, ' ')
      target_parts = split_str(parts[0], ':')
      data.target = str_to_int(target_parts[0])
      for parts {
         if idx = 0 do continue
         push(data.values, str_to_int(it))
      }
      push(datas, data)
   }
   ret datas
end

fn concat(a: int, b: int) 
   s = int_to_str(a) + int_to_str(b)
   ret str_to_int(s)
end

fn try_data(data: Data, total: int, value_index: int, exp: str) str
   if total < 0 do err('<0')
   if total = data.target and value_index = len(data.values) do ret exp
   if total > data.target do ret ''
   if value_index >= len(data.values) do ret ''

   next_value = data.values[value_index]

   next_exp = exp + int_to_str(next_value)
   s = try_data(data, concat(total, next_value), value_index + 1, next_exp)
   if s <> '' do ret s

   next_exp = exp + '*' + int_to_str(next_value)
   s = try_data(data, total * next_value, value_index + 1, next_exp)
   if s <> '' do ret s

   next_exp = '(' + exp + ' + ' + int_to_str(next_value) + ')'
   s = try_data(data, total + next_value, value_index + 1, next_exp)
   if s <> '' do ret s

   ret ''
end

fn is_data_valid(data: Data)
   first_value = data.values[0]
   s = try_data(data, first_value, 1, int_to_str(first_value))
   if s <> '' {
      s1 = int_to_str(data.target) + ';' + s
      log(s1)
      ret 1
   }

   ret 0
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   datas = lines_to_datas(lines)

   total = 0
   for datas {
      if is_data_valid(it) do total = total + it.target
   }

   log(total, 'done')
end
