rec Coords {
    ri: int
    ci: int
}

fn new_coords(ri: int, ci: int)
    c = Coords {}
    c.ri = ri
    c.ci = ci
    ret c
end

rec IntField {
   row_count: int
   col_count: int
   start: Coords
   finish: Coords
   cost: int
   values: [int]
   north: Coords
   south: Coords
   west: Coords
   east: Coords
}

rec VisitedCosts {
    dummy: int
    north: IntField
    south: IntField
    west: IntField
    east: IntField
    best: IntField
    count: int
}

fn create_int_field(row_count: int, col_count: int)
   f = IntField {}
   f.row_count = row_count
   f.col_count = col_count
   f.values = [int]
   arr_set_len(f.values, row_count * col_count)
   ret f
end

fn get_int_field_value(f: IntField, row_index: int, col_index: int) int
   ret f.values[row_index*f.col_count + col_index]
end

fn set_int_field_value(f: IntField, row_index: int, col_index: int, value: int)
   f.values[row_index*f.col_count + col_index] = value
end

fn is_valid_field_index(f: IntField, row_index: int, col_index: int)
   ret row_index >= 0 and row_index < f.row_count and col_index >= 0 and col_index < f.col_count
end

fn int_to_char(i: int) 
    if i = 0 do ret '.'
    if i = 0-1 do ret '/'
    err('int_to_char')
end

fn print_int_field(f: IntField, visited: IntField)
   for 0..(f.row_count - 1) {
      ri = it
      s = ''
      for 0..(f.col_count - 1) {
         ci = it
         v = get_int_field_value(f, ri, ci)
         vis_value = get_int_field_value(visited, ri, ci)
         if vis_value <> 0 {
             s = s + 'O'
             //int_to_str(vis_value)
         } else {
             s = s + int_to_char(v)
         }
        //  if ri = f.cri and f.cci = ci {
        //      s = s + '@' + dir
        //  } else {
        //      s = s + '' + int_to_char(v)
        //  }
      }
      log(s)
   }
   log()
end

fn char_to_int(c: str) 
    if c = '.' do ret 0
    if c = 'S' do ret 0
    if c = 'E' do ret 0
    if c = '#' do ret 0-1
    err('char_to_int')
end

fn lines_to_int_field(lines: [str])
    f = create_int_field(len(lines), len(str_to_chars(lines[0])))
    f.start = Coords {}
    f.finish = Coords {}
    f.north = new_coords(0-1, 0)
    f.south = new_coords(1, 0)
    f.west = new_coords(0, 0-1)
    f.east = new_coords(0, 1)
    f.cost = 1000000000
    for lines {
        ri = idx
        for str_to_chars(it) {
            ci = idx
            if it = 'S' {
                f.start.ri = ri
                f.start.ci = ci
            }
            if it = 'E' {
                f.finish.ri = ri
                f.finish.ci = ci
                //log('finish', ri, ci)
            }
            v = char_to_int(it)
            set_int_field_value(f, ri, ci, v)
        }
    }

    ret f
end

fn rotate_left(f: IntField, dir: Coords) 
    if dir = f.north do ret f.west
    if dir = f.west do ret f.south
    if dir = f.south do ret f.east
    if dir = f.east do ret f.north
    err('rotate_left')
end

fn get_visited_cost(f: IntField, vis: VisitedCosts, ri: int, ci: int, dir: Coords)
    if dir = f.north do ret get_int_field_value(vis.north, ri, ci)
    if dir = f.south do ret get_int_field_value(vis.south, ri, ci)
    if dir = f.west do ret get_int_field_value(vis.west, ri, ci)
    if dir = f.east do ret get_int_field_value(vis.east, ri, ci)
    err('get_visited_cost')
end

fn set_visited_cost(f: IntField, vis: VisitedCosts, ri: int, ci: int, dir: Coords, value: int)
    if dir = f.north {
        set_int_field_value(vis.north, ri, ci, value)
        ret
    }
    if dir = f.south {
        set_int_field_value(vis.south, ri, ci, value)
        ret
    }
    if dir = f.west {
        set_int_field_value(vis.west, ri, ci, value)
        ret
    }
    if dir = f.east {
        set_int_field_value(vis.east, ri, ci, value)
        ret
    }
    err('set_visited_cost')
end

fn try_update_visited_cost(f: IntField, vis: VisitedCosts, ri: int, ci: int, dir: Coords, cost: int)
    if dir = f.north do vf = vis.north
    if dir = f.south do vf = vis.south
    if dir = f.west do vf = vis.west
    if dir = f.east do vf = vis.east

    v = get_int_field_value(vf, ri, ci)
    if v = 0 or cost <= v {
        set_int_field_value(vf, ri, ci, cost)
        ret 1
    }

    ret 0
end

fn get_count(f: IntField)
    count = 0
    for 0..f.row_count - 1 {
        ri = it
        for 0..f.col_count - 1 {
            ci = it
            v = get_int_field_value(f, ri, ci)
            if v = 1 do count = count + 1
        }
    }
    ret count
end

fn update_best(best: IntField, visited: IntField)
    for 0..visited.row_count - 1 {
        ri = it
        for 0..visited.col_count - 1 {
            ci = it
            v = get_int_field_value(visited, ri, ci)
            if v = 1 do set_int_field_value(best, ri, ci, 1)
        }
    }
end

fn try_visit(f: IntField, visited: IntField, ri: int, ci: int, cost: int, dir: Coords, visited_costs: VisitedCosts) int
    if cost > f.cost do ret 1
    
    if get_int_field_value(visited, ri, ci) = 1 do ret 1
    
    v = get_int_field_value(f, ri, ci)
    if v = 0-1 do ret 0

    if ri = f.finish.ri and ci = f.finish.ci {
        f.cost = cost
        //print_int_field(f, visited)
        log('found', cost)
        if cost = 90460 {
            update_best(visited_costs.best, visited)
        }

        ret 1
    }

    set_int_field_value(visited, ri, ci, 1)
    // visited_costs.count = visited_costs.count + 1
    // if visited_costs.count % 50000000 = 0 {
    //     print_int_field(f, visited)
    //     log('at step', visited_costs.count)
    //     readln()
    // }

    rl = rotate_left(f, dir)
    rr = rotate_left(f, rotate_left(f, rl))

    //if try_update_visited_cost(f, visited_costs, ri, ci, dir, cost) {
        r1 = try_visit(f, visited, ri + dir.ri, ci + dir.ci, cost + 1, dir, visited_costs)
    //}

    if try_update_visited_cost(f, visited_costs, ri, ci, rl, cost + 1000) {
        r2 = try_visit(f, visited, ri + rl.ri, ci + rl.ci, cost + 1001, rl, visited_costs)
    }

    if try_update_visited_cost(f, visited_costs, ri, ci, rr, cost + 1000) {
        r3 = try_visit(f, visited, ri + rr.ri, ci + rr.ci, cost + 1001, rr, visited_costs)
    }

    set_int_field_value(visited, ri, ci, 0)

    if r1 + r2 + r3 = 0 {
        set_int_field_value(f, ri, ci, 0-1)
        ret 0
    }

    ret 1
end


fn create_visited_costs(f: IntField)
    c = VisitedCosts {}
    c.north = create_int_field(f.row_count, f.col_count)
    c.south = create_int_field(f.row_count, f.col_count)
    c.west = create_int_field(f.row_count, f.col_count)
    c.east = create_int_field(f.row_count, f.col_count)
    c.best = create_int_field(f.row_count, f.col_count)
    ret c
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    f = lines_to_int_field(lines)
    visited = create_int_field(f.row_count, f.col_count)
    visited_costs = create_visited_costs(f)
    try_visit(f, visited, f.start.ri, f.start.ci, 0, f.east, visited_costs)
    
    //print_int_field(f, visited)
    total = get_count(visited_costs.best) + 1

    log('done', f.cost, 'steps', total)
end
