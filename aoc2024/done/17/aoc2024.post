fn exp(a: int, e: int)
    r = 1
    for 1..e do r = r*a
    ret r
end

rec Data {
    a: int
    b: int
    c: int
    ip: int
    instructions: [int]
    out: str
}

fn get_combo_value(d: Data, operand: int)
    if operand <= 3 do ret operand
    if operand = 4 do ret d.a
    if operand = 5 do ret d.b
    if operand = 6 do ret d.c
    if operand = 7 do ret 7
    err('get_combo_value opcode ' + int_to_str(operand))
end

fn print(d: Data) 
    log('A=', d.a, 'B=', d.b, 'C=', d.c)
    //log('instructions:', len(d.instructions))
    //log('out:', d.out)
end

fn print_params(d: Data) 
    if d.ip >= len(d.instructions) {
        op = 0
        v = 0
    } else {
        op = d.instructions[d.ip] 
        v = d.instructions[d.ip + 1]
    }
    log('op=', op, 'value=', v, 'combo=', get_combo_value(d, v), 'out:', d.out)
end

fn create_data(lines: [str])
    d = Data {}
    d.a = str_to_int(str_split(lines[0], ' ')[2])
    d.b = str_to_int(str_split(lines[1], ' ')[2])
    d.c = str_to_int(str_split(lines[2], ' ')[2])

    d.instructions = [int]
    for str_split(str_split(lines[4], ' ')[1], ',') {
        push(d.instructions, str_to_int(it))
    }

    ret d
end

fn print1(d: Data, cmd: str)
    ret
    log(cmd)
    print(d)
end

fn execute(d: Data)
    loop {
        if d.ip >= len(d.instructions) do break
        opcode = d.instructions[d.ip]
        operand = d.instructions[d.ip + 1]
        value = operand
        combo_value = get_combo_value(d, operand)

        //print(d)
        //print_params(d)

        if opcode = 0 { 
            /// adv
            //log('adv', 'A >> combo |', d.a, '>>', combo_value, '=', d.a rshift 3)
            d.a = d.a rshift combo_value
            d.ip = d.ip + 2
        } else if opcode = 1 {
            /// bxl
            //log('bxl', 'B xor value => B |', d.b, 'xor', value, '=>', d.b^value)
            d.b = d.b ^ value
            d.ip = d.ip + 2
        } else if opcode = 2 {
            /// bst 
            //log('bst: A(', d.a, ') % 8 => B(', d.a % 8, ')')
            d.b = combo_value % 8
            d.ip = d.ip + 2
        } else if opcode = 3 {
            //log('ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret ret')
            /// jnz
            if d.a > 0 {
                d.ip = value
            } else {
                d.ip = d.ip + 2
            }
        } else if opcode = 4 {
            /// bxc
            //log('bxc: B xor C => B(', d.b, 'xor', d.c, '=>', d.b ^ d.c)
            d.b = d.b ^ d.c
            d.ip = d.ip + 2
        } else if opcode = 5 {
            /// out
            v = combo_value % 8
            //log('out: combo % 8:', combo_value, '% 8', v)
            if str_len(d.out) > 0 do d.out = d.out + ','
            d.out = d.out + int_to_str(v)
            d.ip = d.ip + 2
        } else if opcode = 6 {
            //log('opcode = 6')
            /// bdv
            d.b = d.a rshift combo_value
            d.ip = d.ip + 2
        } else if opcode = 7 {
            /// cdv
            d.c = d.a rshift combo_value
            //log('cdv', 'A >> combo => C |', d.a, '>>', combo_value, '=', d.c)
            d.ip = d.ip + 2
        } else {
            err('err')
        }
        //print(d)
        //log()
        //readln()
    }
end

fn test(a: int)
    b = a % 8
    b = b ^ 5
    c = a rshift b
    b = b ^ 6
    b = b ^ c
    b = b % 8
    ret b
end

fn try_find(targets: [int], a: int, index: int, res: [int])
    if index >= len(targets) do ret
    
    target = targets[index]
    for 0..7 {
        a_new = a*8 + it
        if test(a_new) = target {
            if index = len(targets) - 1 {
                log('found ', a_new)
                push(res, a_new)
            }
            try_find(targets, a_new, index + 1, res)
        }
    }
end

fn generate(d: Data)
    targets = [int]
    arr = str_split('2,4,1,5,7,5,1,6,0,3,4,3,5,5,3,0', ',')
    loop {
        if len(arr) = 0 do break
        push(targets, str_to_int(pop(arr)))
    }

    res = [int]
    try_find(targets, 0, 0, res)
    arr_sort(res)

    log('reses', len(res))
    log('min', res[0])
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    d = create_data(lines)
    s = str_split(lines[4], ' ')[1]
    s = str_remove(s, ',')
    //target = str_to_int(s)
    print(d)
    execute(d)
    print(d)
    generate(d)
    
    log('\nout=', d.out)
end
