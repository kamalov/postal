rec Coords {
    ri: int
    ci: int
}

fn new_coords(ri: int, ci: int)
    c = Coords {}
    c.ri = ri
    c.ci = ci
    ret c
end

rec IntField {
   row_count: int
   col_count: int
   start: Coords
   finish: Coords
   values: [int]
}

fn create_int_field(row_count: int, col_count: int)
   f = IntField {}
   f.row_count = row_count
   f.col_count = col_count
   f.values = [int]
   arr_set_len(f.values, row_count * col_count)
   ret f
end

fn get_int_field_value(f: IntField, row_index: int, col_index: int) int
   ret f.values[row_index*f.col_count + col_index]
end

fn set_int_field_value(f: IntField, row_index: int, col_index: int, value: int)
   f.values[row_index*f.col_count + col_index] = value
end

fn is_valid_field_index(f: IntField, row_index: int, col_index: int)
   ret row_index >= 0 and row_index < f.row_count and col_index >= 0 and col_index < f.col_count
end

fn int_to_char(i: int) 
    if i = 0 do ret '.'
    if i = 0-1 do ret '#'
    ret int_to_str(i)
end

fn char_to_int(c: str) 
    if c = '.' do ret 0
    if c = 'S' do ret 0
    if c = 'E' do ret 0
    if c = '#' do ret 0-1
    err('char_to_int')
end

fn print_int_field(f: IntField)
   for 0..(f.row_count - 1) {
      ri = it
      s = ''
      for 0..(f.col_count - 1) {
         ci = it
         v = get_int_field_value(f, ri, ci)
        s = s + int_to_char(v)
      }
      log(s)
   }
   log()
end

fn lines_to_int_field(lines: [str])
    f = create_int_field(len(lines), len(str_to_chars(lines[0])))
    f.start = Coords {}
    f.finish = Coords {}
    for lines {
        ri = idx
        for str_to_chars(it) {
            ci = idx
            if it = 'S' {
                f.start.ri = ri
                f.start.ci = ci
            }
            if it = 'E' {
                f.finish.ri = ri
                f.finish.ci = ci
            }
            v = char_to_int(it)
            set_int_field_value(f, ri, ci, v)
        }
    }
    ret f
end

fn prepare(f: IntField, ri: int, ci: int, cost: int)
    if is_valid_field_index(f, ri, ci) = 0 do ret

    v = get_int_field_value(f, ri, ci) 
    if v = 0-1 or v > 0 do ret

    set_int_field_value(f, ri, ci, cost)

    prepare(f, ri + 1, ci, cost + 1)
    prepare(f, ri - 1, ci, cost + 1)
    prepare(f, ri, ci + 1, cost + 1)
    prepare(f, ri, ci - 1, cost + 1)
end

fn abs_val(i: int)
    if i < 0 do ret 0 - i
    ret i
end

fn check_cheat(f: IntField, ri: int, ci: int, ri1: int, ci1: int, cheat_count: [int])
    if is_valid_field_index(f, ri1, ci1) = 0 do ret 0
    v = get_int_field_value(f, ri, ci)
    v1 = get_int_field_value(f, ri1, ci1)
    if v1 = 0-1 do ret 0
    l = abs_val(ri - ri1) + abs_val(ci - ci1)
    diff = v1 - v - l
    if diff > 0 {
        cheat_count[diff] = cheat_count[diff] + 1
        if diff >= 100 {
        //     log('cheat=', diff, 'from', ri, ci, 'to', ri1, ci1)
            ret 1
        }
    }
    ret 0
end

fn try_cheat(f: IntField)
    r = 0 
    cheat_count = [int]
    arr_set_len(cheat_count, 10000)
    max = 20
    for 0..(f.row_count - 1) {
        ri = it
        for 0..(f.col_count - 1) {
            ci = it
            v = get_int_field_value(f, ri, ci)
            if v = 0-1 do continue
            for 0..max {
                dr = it
                for 0..max {
                    dc = it
                    l = dr + dc
                    if l < 2 or l > max do continue
                    //if dr <> 0 and dc <> 0 do continue
                    //log('dr dc', dr, dc)
                    if dr = 0 {
                        r = r + check_cheat(f, ri, ci, ri, ci + dc, cheat_count)
                        r = r + check_cheat(f, ri, ci, ri, ci - dc, cheat_count)
                    } else if dc = 0 {
                        r = r + check_cheat(f, ri, ci, ri + dr, ci, cheat_count)
                        r = r + check_cheat(f, ri, ci, ri - dr, ci, cheat_count)
                    } else {
                        r = r + check_cheat(f, ri, ci, ri + dr, ci + dc, cheat_count)
                        r = r + check_cheat(f, ri, ci, ri + dr, ci - dc, cheat_count)
                        r = r + check_cheat(f, ri, ci, ri - dr, ci + dc, cheat_count)
                        r = r + check_cheat(f, ri, ci, ri - dr, ci - dc, cheat_count)
                    }
                }
            }
        }
    }
    for cheat_count {
        //if it > 0 do log('cheat', idx, 'count', it)
        if it > 0 do log('count', it, 'cheat', idx)
    }
    ret r
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    f = lines_to_int_field(lines)

    //print_int_field(f)
    prepare(f, f.start.ri, f.start.ci, 1)
    //print_int_field(f)
    log('max', get_int_field_value(f, f.finish.ri, f.finish.ci))

    t = try_cheat(f)

    log('done', t)
end
