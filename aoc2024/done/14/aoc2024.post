rec Data {
    x: int
    y: int
    dx: int
    dy: int
}

fn create_data(line: str)
    d = Data {}

    ps = str_split(str_split(line, ' ')[0], ',')
    x = str_split(ps[0], '=')[1]
    y = ps[1]
    d.x = str_to_int(x)
    d.y = str_to_int(y)

    vs = str_split(str_split(line, ' ')[1], ',')
    dx = str_split(vs[0], '=')[1]
    dy = vs[1]
    d.dx = str_to_int(dx)
    d.dy = str_to_int(dy)

    ret d
end

fn print(datas: [Data], xlen: int, ylen: int)
    mx = xlen / 2
    my = ylen / 2
    for 0..(ylen - 1) {
        s = ''
        y = it
        for 0..(xlen - 1) {
            x = it
            found = 0
            for datas {
                if it.x = x and it.y = y {
                    found = 1
                    break
                }
            }
            if found {
                if x = mx or y = my {
                    s = s + '#'
                } else {
                    s = s + '.'
                }
            } else {
                s = s + ' '
            }
        }
        log(s)
    }
    log()
end

fn go_next(d: Data, xlen: int, ylen: int)
    x = (d.x + d.dx) % xlen
    if x < 0 do x = x + xlen
    y = (d.y + d.dy) % ylen
    if y < 0 do y = y + ylen

    d.x = x
    d.y = y
    
    mx = xlen / 2
    my = ylen / 2

    //if x = mx or y = my do ret 0
    if x = mx do ret 0

    if x > mx and y < my do ret 1
    if x < mx and y < my do ret 2
    if x < mx and y > my do ret 3
    if x > mx and y > my do ret 4

    ret 6
end

fn abs1(a: int) 
    if a < 0 do ret 0 - a
    ret a
end

fn process(lines: [str])
    xlen = 101
    ylen = 103
    datas = [Data]
    for lines {
        data = create_data(it)
        push(datas, data)
    }
    quads = [int]
    arr_set_len(quads, 5)

    for 1..100000000 {
        q1 = 0
        q2 = 0
        q3 = 0
        q4 = 0
        q0 = 0
        for datas {
            q = go_next(it, xlen, ylen)
            if q = 0 do q0 = q0 + 1
            if q = 1 do q1 = q1 + 1
            if q = 2 do q2 = q2 + 1
            if q = 3 do q3 = q3 + 1
            if q = 4 do q4 = q4 + 1
        }
        if it % 100000 = 0 do log(it)
        //if abs1(q1 - q2) = 0 and abs1(q3 - q4) = 0 {
        if q0 > 24 {
            print(datas, xlen, ylen)
            //log('step', it, abs1(q1 - q2), abs1(q3 - q4))
            log('step', it, 'q0', q0)
            readln()
        }
    }
    total = q1 * q2 * q3 * q4
    ret total
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   total = process(lines)

   log('total = ', total)
end
