rec IntField {
   row_count: int
   col_count: int
   cri: int
   cci: int
   values: [int]
}

rec Delta {
    dr: int
    dc: int
}

rec Coords {
    ri: int
    ci: int
}

fn coords(ri: int, ci: int)
    c = Coords {}
    c.ri = ri
    c.ci = ci
    ret c
end

fn create_int_field(row_count: int, col_count: int)
   f = IntField {}
   f.row_count = row_count
   f.col_count = col_count
   f.values = [int]
   arr_set_len(f.values, row_count * col_count)
   ret f
end

fn get_int_field_value(f: IntField, row_index: int, col_index: int) int
   ret f.values[row_index*f.col_count + col_index]
end

fn set_int_field_value(f: IntField, row_index: int, col_index: int, value: int)
   f.values[row_index*f.col_count + col_index] = value
end

fn is_valid_field_index(f: IntField, row_index: int, col_index: int)
   ret row_index >= 0 and row_index < f.row_count and col_index >= 0 and col_index < f.col_count
end

fn int_to_char(i: int) 
    if i = 0 do ret '.'
    if i = 1 do ret '['
    if i = 2 do ret ']'
    if i = 3 do ret '#'
    err('int_to_char')
end

fn print_int_field(f: IntField)
   for 0..(f.row_count - 1) {
      ri = it
      s = ''
      for 0..(f.col_count - 1) {
         ci = it
         v = get_int_field_value(f, ri, ci)
         if ri = f.cri and f.cci = ci {
             s = s + '' + '@'
         } else {
             s = s + '' + int_to_char(v)
         }
      }
      log(s)
   }
   log()
end

fn char_to_int(c: str) 
    if c = '.' do ret 0
    if c = '@' do ret 0
    if c = '[' do ret 1
    if c = ']' do ret 2
    if c = '#' do ret 3
    err('char_to_int')
end

fn char_to_new_chars(c: str) str 
    if c = '.' do ret '..'
    if c = '@' do ret '@.'
    if c = 'O' do ret '[]'
    if c = '#' do ret '##'
    err('char_to_new_chars')
end

fn lines_to_int_field(lines: [str])
    f = create_int_field(len(lines), len(str_to_chars(lines[0]))*2)
    for lines {
        s = ''
        for str_to_chars(it) {
            s = s + char_to_new_chars(it)
        }
        ri = idx
        for str_to_chars(s) {
            ci = idx
            if it = '@' {
                f.cri = ri
                f.cci = ci
            }
            v = char_to_int(it)
            set_int_field_value(f, ri, ci, v)
        }
    }

    ret f
end

fn get_delta(s: str)
    dr = 0
    dc = 0
    if s = '<' do dc = 0-1
    if s = '>' do dc = 1
    if s = 'v' do dr = 1
    if s = '^' do dr = 0-1
    d = Delta {}
    d.dr = dr
    d.dc = dc
    ret d
end

fn move_many(f: IntField, box_indexes: [Coords], dir: str)
    d = get_delta(dir)
    for box_indexes {
        set_int_field_value(f, it.ri, it.ci, 0)
        set_int_field_value(f, it.ri, it.ci + 1, 0)
    }

    loop {
        if len(box_indexes) = 0 do break
        c = pop(box_indexes)
        if dir = '>' {
            set_int_field_value(f, c.ri, c.ci + 1, 1)
            set_int_field_value(f, c.ri, c.ci + 2, 2)
            continue
        }

        if dir = '<' {
            set_int_field_value(f, c.ri, c.ci - 1, 1)
            set_int_field_value(f, c.ri, c.ci - 0, 2)
            continue
        }

        if dir = '^' {
            set_int_field_value(f, c.ri - 1, c.ci, 1)
            set_int_field_value(f, c.ri - 1, c.ci + 1, 2)
            continue
        }

        if dir = 'v' {
            set_int_field_value(f, c.ri + 1, c.ci, 1)
            set_int_field_value(f, c.ri + 1, c.ci + 1, 2)
            continue
        }
    }
end

fn try_add_boxes(boxes: #[Coords, int], box: Coords, dir: str)
end

fn move_next(f: IntField, dir: str)
    d = get_delta(dir) 
    ri = f.cri + d.dr
    ci = f.cci + d.dc
    v = get_int_field_value(f, ri, ci)
    if v = 3 do ret
    if v = 0 {
        set_int_field_value(f, f.cri, f.cci, 0) 
        f.cri = ri
        f.cci = ci
        ret
    }
    
    if dir = '<' or dir = '>' {
        box_indexes = [Coords]
        loop {
            v = get_int_field_value(f, ri, ci)
            
            if v = 3 do ret
            
            if v = 0 {
                move_many(f, box_indexes, dir)
                f.cri = f.cri + d.dr
                f.cci = f.cci + d.dc
                ret
            }
            
            if v = 1 {
                push(box_indexes, coords(ri, ci))
            } 
            
            ri = ri + d.dr
            ci = ci + d.dc
        }
        ret
    }    

    if dir = '^' {
        boxes = #[Coords, int]
        v = get_int_field_value(f, ri, ci)
        if v = 1 {
            c = coords(ri, ci)
        } else {
            c = coords(ri, ci - 1)
        }

        if try_add_boxes(boxes, c)

    }    
end

fn get_total(f: IntField)
    total = 0
    for 0..(f.row_count - 1) {
      ri = it
      for 0..(f.col_count - 1) {
         ci = it
         v = get_int_field_value(f, ri, ci)
         if v = 1 {
            total = total + ri*100 + ci
         }
      }
   }
   ret total
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    i = arr_index_of(lines, '')
    f = lines_to_int_field(arr_slice(lines, 0, i - 1))
    print_int_field(f)
    commands = str_arr_join(arr_slice(lines, i + 1, len(lines)), '')
    //log(commands)
    for str_to_chars(commands) {
        delta = get_delta(it)
        move_next(f, it)
    }
    print_int_field(f)
    log()
    log('total', get_total(f))
end
