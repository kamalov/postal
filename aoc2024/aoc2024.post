//     +---+---+
//     | ^ | A |
// +---+---+---+
// | < | v | > |
// +---+---+---+
rec Navi {
    from: int
    to: int
    path: [int]
    path_str: str
}

fn reverse_dir(dir: str)
    if dir = '^' do ret 'v'
    if dir = '>' do ret '<'
    if dir = '<' do ret '>'
    if dir = 'v' do ret '^'
    err('err')
end

fn char_to_int(c: str)
    if c = 'A' do ret 10
    if c = '>' do ret 11
    if c = 'v' do ret 12
    if c = '<' do ret 13
    if c = '^' do ret 14
    ret str_to_int(c)
end

fn int_to_char(i: int)
    if i = 10 do ret 'A'
    if i = 11 do ret '>'
    if i = 12 do ret 'v'
    if i = 13 do ret '<'
    if i = 14 do ret '^'
    ret int_to_str(i)
end

fn path_to_str(p: [int])
    s = ''
    for p do s = s + int_to_char(it)
    ret s
end

fn str_to_path(s: str)
    r = [int]
    for str_to_chars(s) do push(r, char_to_int(it))
    ret r
end

fn print_navi(n: Navi) 
    log(n.from + n.to)
    s = '    '
    for n.path do s = s + int_to_char(it) + ' '
    log(s)
end

fn get_paths_str_array
    l = [str]

    push(l, 'A^ <')
    push(l, 'A> v')
    //push(l, 'Av <v v<')
    push(l, 'Av <v')
    push(l, 'A< v<<')
    //push(l, '^> >v v>')
    push(l, '^> >v')
    push(l, '^v v')
    push(l, '^< v<')
    push(l, '>v <')
    push(l, '>< <<')
    push(l, 'v< <')

    // +---+---+---+
    // | 7 | 8 | 9 |
    // +---+---+---+
    // | 4 | 5 | 6 |
    // +---+---+---+
    // | 1 | 2 | 3 |
    // +---+---+---+
    //     | 0 | A |
    //     +---+---+

    push(l, 'A0 <')
    push(l, 'A1 ^<<')
    //push(l, 'A2 <^ ^<')
    push(l, 'A2 <^')
    push(l, 'A3 ^')
    push(l, 'A4 ^^<<')
    //push(l, 'A5 <^^ ^^<')
    push(l, 'A5 <^^')
    push(l, 'A6 ^^')
    //push(l, 'A7 <^<^^ <^^<^ <^^^< ^<<^^ ^<^<^ ^<^^< ^^<<^ ^^<^< ^^^<<')
    push(l, 'A7 ^^^<<')
    //push(l, 'A8 <^^^ ^^^<')
    push(l, 'A8 <^^^')
    push(l, 'A9 ^^^')

    push(l, '01 ^<')
    push(l, '02 ^')
    push(l, '03 ^>')
    push(l, '04 ^^<')
    push(l, '05 ^^')
    push(l, '06 ^^>')
    push(l, '07 ^^^<')
    push(l, '08 ^^^')
    push(l, '09 ^^^>')

    push(l, '12 >')
    push(l, '13 >>')
    push(l, '14 ^')
    //push(l, '15 >^ ^>')
    push(l, '15 >^')
    push(l, '16 >>^ ^>>')
    push(l, '17 ^^')
    //push(l, '18 ^^> >^^')
    push(l, '18 >^^')
    //push(l, '19 >>^^ ^^>>')
    push(l, '19 >>^^')
    
    push(l, '23 >')
    //push(l, '24 <^ ^<')
    push(l, '24 <^')
    push(l, '25 ^')
    //push(l, '26 ^> >^')
    push(l, '26 >^')
    //push(l, '27 <^^ ^^<')
    push(l, '27 <^^')
    push(l, '28 ^^')
    //push(l, '29 >^^ ^^>')
    push(l, '29 >^^')
    
//    push(l, '34 <<^ ^<<')
    push(l, '34 <<^')
    //push(l, '35 <^ ^<')
    push(l, '35 <^')
    push(l, '36 ^')
    //push(l, '37 <<^^ ^^<<')
    push(l, '37 <<^^')
    //push(l, '38 <^^ ^^<')
    push(l, '38 <^^')
    push(l, '39 ^^')
    
    push(l, '45 >')
    push(l, '46 >>')
    push(l, '47 ^')
    //push(l, '48 ^> >^')
    push(l, '48 >^')
    //push(l, '49 ^>> >>^')
    push(l, '49 >>^')

    push(l, '56 >')
    //push(l, '57 <^ ^<')
    push(l, '57 <^')
    push(l, '58 ^')
    //push(l, '59 ^> >^')
    push(l, '59 >^')
    
    //push(l, '67 <<^ ^<<')
    push(l, '67 <<^')
    //push(l, '68 <^ ^<')
    push(l, '68 <^')
    push(l, '69 ^')   
    
    push(l, '78 >')
    push(l, '79 >>')
    
    push(l, '89 >')


    ret l
end

fn create_navis(lines: [str])
    navis = [Navi]
    for lines {
        p = str_split(it, ' ')

        from = char_to_int(str_to_chars(p[0])[0])
        to = char_to_int(str_to_chars(p[0])[1])

        for 1..len(p) - 1 {
            a = str_to_chars(p[it])
            forward = Navi {}
            forward.from = from
            forward.to = to
            forward.path = [int]

            backward = Navi {}
            backward.from = to
            backward.to = from
            backward.path = [int]

            for a {
                push(forward.path, char_to_int(it))
                arr_push_front(backward.path, char_to_int(reverse_dir(it)))
            }
            forward.path_str = path_to_str(forward.path)
            backward.path_str = path_to_str(backward.path)
            push(navis, forward)
            push(navis, backward)
        }

    }
    ret navis
end

rec Data {
    navis: [Navi]
}

fn transform(d: Data, target_path: [int], from_: int, index_: int, transformed_: str)
    from = from_
    t = [str]
    push(t, transformed_)
    index = index_
    loop {
        if index >= len(target_path) {
            // if map_has_key(res, transformed) = 0 {
            //     map_add(res, transformed, 0)
            // }
            s = str_arr_join(t, '')
            arr_set_len(t, 0)
            ret s
        }

        to = target_path[index]
        if from = to {
            //transform(d, target_path, to, index + 1, transformed + 'A', res)
            from = to
            index = index + 1
            push(t, 'A')
        } else {
            for d.navis {
                if it.from = from and it.to = to {
                    //log('it.from = from and it.to', from, to, s)
                    //transform(d, target_path, to, index + 1, transformed + it.path_str + 'A', res)
                    from = to
                    index = index + 1
                    push(t, it.path_str + 'A')
                    break
                } 
            }
        }
    }
end

fn transform1(d: Data, target_path: [int], from: int, index: int, transformed: str, res: [str])
    if index >= len(target_path) {
        push(res, transformed)
        ret
    }

    to = target_path[index]
    if from = to {
        transform1(d, target_path, to, index + 1, transformed + 'A', res)
    } else {
        c = 0
        for d.navis {
            if it.from = from and it.to = to {
                if c > 0 do log(it.path_str)
                //log('it.from = from and it.to', from, to, s)
                transform1(d, target_path, to, index + 1, transformed + it.path_str + 'A', res)
                c = c + 1
            } 
        }
    }
end

fn process(d: Data, s: str)
    src = s
    //log(s)
    for 1..20 {
        //log('it', it)
        //res = #[str, int]
        iteration = it

        if iteration > 2 do log('it', iteration)
            //log(it)
            //if iteration > 2 do log(it)
            //r = [str]
        p = str_to_path(src)
        res = transform(d, p, char_to_int('A'), 0, '')
        
        if iteration > 2 {
            // for r do log(it, str_len(it))
            // log()
        }
            //for r do push(res, it)
        src = res
        if iteration > 10 do log(str_len(res))
        //arr_set_len(res, 0)
    }

    log('len', str_len(src))
    //arr_set_len(src, 0)
    ret str_len(src)
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')

    d = Data {}
    d.navis = create_navis(get_paths_str_array())

    total = 0
    for lines {
        s = it
        if s = '' do break
        //log(s)
        v = str_to_int(str_remove(s, 'A'))
        r = process(d, s)    
        //log(v, r, v*r)
        total = total + v*r
    }

    //log('\ndone')
    log('\ndone', total)
end
