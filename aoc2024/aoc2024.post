rec StrField {
   row_count: int
   col_count: int
   values: [str]
}

rec Cell {
   ri: int
   ci: int
}

fn create_str_field(row_count: int, col_count: int)
   f = StrField {}
   f.row_count = row_count
   f.col_count = col_count
   f.values = [str]
   array_set_len(f.values, row_count * col_count)
   ret f
end

fn get_str_field_value(f: StrField, row_index: int, col_index: int) str
   ret f.values[row_index*f.col_count + col_index]
end

fn set_str_field_value(f: StrField, row_index: int, col_index: int, value: str)
   f.values[row_index*f.col_count + col_index] = value
end

fn is_valid_field_index(f: StrField, row_index: int, col_index: int)
   ret row_index >= 0 and row_index < f.row_count and col_index >= 0 and col_index < f.col_count
end

fn print_str_field(f: StrField)
   for 0..(f.row_count - 1) {
      ri = it
      s = ''
      for 0..(f.col_count - 1) {
         ci = it
         v = get_str_field_value(f, ri, ci)
         s = s + ' ' + v
      }
      log(s)
   }
   log()
end

fn lines_to_str_field(lines: [str])
   f = create_str_field(len(lines), str_len(lines[0]))
   for lines {
      ri = idx
      for str_to_chars(it) {
         ci = idx
         set_str_field_value(f, ri, ci, it)
      }
   }
   ret f
end

fn set_visited(visited: [int], ri: int, ci: int) 
   visited[ri*1000 + ci] = 1
end

fn was_visited(visited: [int], ri: int, ci: int) 
   ret visited[ri*1000 + ci]
end

fn fill_farm(f: StrField, visited: [int], letter: str, farm: [Cell], ri: int, ci: int)
   if is_valid_field_index(f, ri, ci) = 0 do ret
   if was_visited(visited, ri, ci) do ret
   v = get_str_field_value(f, ri, ci)
   if v <> letter do ret
   cell = Cell {}
   cell.ri = ri
   cell.ci = ci
   push(farm, cell)
   set_visited(visited, ri, ci)

   fill_farm(f, visited, letter, farm, ri - 1, ci)
   fill_farm(f, visited, letter, farm, ri + 1, ci)
   fill_farm(f, visited, letter, farm, ri, ci - 1)
   fill_farm(f, visited, letter, farm, ri, ci + 1)
end

fn get_farm(f: StrField, visited: [int], ri: int, ci: int)
   farm = [Cell]
   if was_visited(visited, ri, ci) = 1 do ret farm
   letter = get_str_field_value(f, ri, ci)
   fill_farm(f, visited, letter, farm, ri, ci)
   ret farm
end

rec Edge {
   ri: int
   ci: int
   ri1: int
   ci1: int
}

fn coord_to_edge(ri: int, ci: int, ri1: int, ci1: int)  
   e = Edge {}
   e.ri = ri
   e.ci = ci
   e.ri1 = ri1
   e.ci1 = ci1
   ret e
end

fn get_cell_edges(f: Cell)
   edges = [Edge]
   push(edges, coord_to_edge(f.ri, f.ci, f.ri, f.ci + 1))
   push(edges, coord_to_edge(f.ri, f.ci, f.ri + 1, f.ci))
   push(edges, coord_to_edge(f.ri + 1, f.ci, f.ri + 1, f.ci + 1))
   push(edges, coord_to_edge(f.ri, f.ci + 1, f.ri + 1, f.ci + 1))
   ret edges
end

fn get_perimeter(cells: [Cell])
   edges = #[Edge, int]
   for cells {
      for get_cell_edges(it) {
         if hashmap_has_key(edges, it) {
            hashmap_remove(edges, it)
         } else {
            hashmap_add(edges, it, 0)
         }
      }
   }
   ret hashmap_len(edges)
end

fn process(f: StrField)
   visited = [int]
   array_set_len(visited, 1000000)
   total = 0
   for 0..(f.row_count - 1) {
      ri = it
      for 0..(f.col_count - 1) {
         ci = it
         farm = get_farm(f, visited, ri, ci)
         if len(farm) > 0 {
            v = get_str_field_value(f, ri, ci)
            perimeter = get_perimeter(farm)
            log(v, 'len: ', len(farm), '; perimeter: ', perimeter)
            total = total + perimeter*len(farm)
         }
      }
   }
   ret total
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   f = lines_to_str_field(lines)
   print_str_field(f)
   total = process(f)

   log('total = ', total)
end
