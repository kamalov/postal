/// lib array utils
fn len<T>(a: [T]) int external
fn set_array_size<T>(a: [T], new_size: int) external
fn push<T>(a: [T], elem: T) external
fn set_array_value<T>(a: [T], index: int, value: T) external
fn sort_array<T>(a: [T]) external
fn array_contains<T>(a: [T], value: T) int external
fn remove_array_element_at<T>(a: [T], index:int) external

/// lib string utils
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
fn str_contains(s: str, subs: str) int external

/// lib other utils
fn err(s: str) external
fn read_line_from_console() str external   
fn read_string_lines_from_file(filename: str) [str] external

/// main
rec Val {
   value: int
   count: int
}

fn create_new_val(value: int, count: int)
   v = Val {}
   v.value = value
   v.count = count
   ret v
end

fn print(vals: [Val])
   s = ''
   for vals {
      if it.count = 0 do continue
      s = s + ' ' + int_to_str(it.value) + ' (' + int_to_str(it.count) + ')'
   }
   log(s)
end

fn get_new_vals(old_vals: [Val])
   new_vals = [Val]
   for old_vals {
      old_val = it
      value = it.value
      count = it.count
      if count = 0 do continue
      old_val.count = 0

      if value = 0 {
         push(new_vals, create_new_val(1, count))
         continue
      } 
      
      if value = 1 {
         push(new_vals, create_new_val(2024, count))
         continue
      } 

      size = len(str_to_chars(int_to_str(value)))
      if size % 2 = 0 {
         exponent = size / 2
         divider = 1
         for 1..exponent do divider = divider*10
         lv = value / divider
         rv = value % divider 
         push(new_vals, create_new_val(lv, count))
         push(new_vals, create_new_val(rv, count))
         continue
      } 
      
      new_value = value*2024
      if new_value < 0 {
         s = 'overflow at ' + int_to_str(value) + ' ' + int_to_str(new_value)
         err(s)
      }
      push(new_vals, create_new_val(new_value, count))
   }

   for new_vals {
      new_val = it
      found = 0
      for old_vals {
         if it.value = new_val.value {
            it.count = it.count + new_val.count
            found = 1
            break
         }
      }
      if found = 0 do push(old_vals, create_new_val(new_val.value, new_val.count))
   }
   ret old_vals

   // new_vals = [Val]
   // for old_vals {
   //    if it.count > 0 do push(new_vals, it)
   // }

   // for new_values {
   //    push(new_vals, create_new_val(it, 1))
   // }

   // ret new_vals
end

fn get_len(vals: [Val])
   total = 0
   for vals {
      if it.count > 0 do total = total + it.count
   }
   ret total
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   vals = [Val]
   for split_str(lines[0], ' ') {
      push(vals, create_new_val(str_to_int(it), 1))
   }
   print(vals)
   for 1..75 {
      vals = get_new_vals(vals)
      log(it, len(vals), get_len(vals))
      // print(vals)
      // read_line_from_console()
   }

   log('done', len(vals), get_len(vals))
end
