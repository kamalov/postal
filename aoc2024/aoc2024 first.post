fn read_lines(filename: str) [str] external
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
// fn sort_int_array(a: [int]) [int] external
fn len<T>(a: [T]) int external

rec Row {
   cols: [str]
}

fn get_cell_value(rows: [Row], row_index: int, col_index: int)
   rows_count = len(rows)
   cols_count = len(rows[0].cols)
   if row_index < 0 or col_index < 0 or row_index >= rows_count or col_index >= cols_count {
      ret ''
   }
   ret rows[row_index].cols[col_index]
end

fn try_xmas(rows: [Row], row_index: int, col_index: int, dx: int, dy: int) int
   x = get_cell_value(rows, row_index, col_index) = 'X'
   m = get_cell_value(rows, row_index + dy, col_index + dx) = 'M'
   a = get_cell_value(rows, row_index + dy*2, col_index + dx*2) = 'A'
   s = get_cell_value(rows, row_index + dy*3, col_index + dx*3) = 'S'
   if x and m and a and s do ret 1
   ret 0
end

fn total_xmas_from_cell(rows: [Row], row_index: int, col_index: int) int
   total = 0
   total = total + try_xmas(rows, row_index, col_index, 1, 0-1)
   total = total + try_xmas(rows, row_index, col_index, 1, 0)
   total = total + try_xmas(rows, row_index, col_index, 1, 1)
   total = total + try_xmas(rows, row_index, col_index, 0-1, 0-1)
   total = total + try_xmas(rows, row_index, col_index, 0-1, 0)
   total = total + try_xmas(rows, row_index, col_index, 0-1, 1)
   total = total + try_xmas(rows, row_index, col_index, 0, 1)
   total = total + try_xmas(rows, row_index, col_index, 0, 0-1)
   ret total
end

fn run
   lines = read_lines('D:/src/postal/aoc2024/input.txt')

   rows = [Row]
   for lines {
      row = Row {}
      row.cols = str_to_chars(it)
      push(rows, row)
   }

   total = 0
   for rows {
      row_index = idx
      for row.cols {
         col_index = idx   
         total = total + total_xmas_from_cell(rows, row_index, col_index)
      }
   }

   log(total)
   log('done')
end
