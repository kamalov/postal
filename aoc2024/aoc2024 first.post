/// lib array utils
fn len<T>(a: [T]) int external
fn set_array_size<T>(a: [T], new_size: int) external
fn push<T>(a: [T], elem: T) external
fn set_array_value<T>(a: [T], index: int, value: T) external
fn sort_array<T>(a: [T]) external
fn array_contains<T>(a: [T], value: T) int external

/// lib string utils
fn split_str(s: str, by: str) [str] external
fn str_to_int(s: str) int external
fn int_to_str(i: int) str external
fn str_to_chars(s: str) [str] external
fn str_contains(s: str, subs: str) int external

/// lib other utils
fn err(s: str) external
fn read_line_from_console() str external   
fn read_string_lines_from_file(filename: str) [str] external

fn print_vals(vals: [int])
   s = ''
   for vals {
      if it = 0 {
         s = s + '.'
      } else {
         s = s + int_to_str(it - 1)
      }
   }
   log(s)
end

fn sort(vals: [int])
   li = 0
   ri = len(vals) - 1
   loop {
      if li >= ri do break

      lv = vals[li]
      if lv > 0 {
         li = li + 1
         continue
      }

      rv = vals[ri]
      if rv = 0 {
         ri = ri - 1
         continue
      }

      vals[li] = rv
      vals[ri] = 0
      li = li + 1
      ri = ri - 1
      // print_vals(vals)
      // read_line_from_console()
   }
end

fn process(line: str)
   vals = [int]
   is_file = 1
   id = 1
   for str_to_chars(line) {
      v = str_to_int(it)
      for 1..v {
         if is_file {
            push(vals, id)
         } else {
            push(vals, 0)
         }
      }
      if is_file do id = id + 1
      is_file = is_file = 0
   }

   //print_vals(vals)
   sort(vals)
   log(len(vals))
   //print_vals(vals)

   total = 0
   for vals {
      if it = 0 do continue
      total = total + (it - 1)*idx
   }

   ret total
end

/// main
fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   count = process(lines[0])
   log(count, 'done')
end
