fn exp(a: int, e: int)
    r = 1
    for 1..e do r = r*a
    ret r
end

rec Data {
    a: int
    b: int
    c: int
    ip: int
    instructions: [int]
    out: str
}

fn get_combo_value(d: Data, operand: int)
    if operand <= 3 do ret operand
    if operand = 4 do ret d.a
    if operand = 5 do ret d.b
    if operand = 6 do ret d.c
    if operand = 7 do ret 7
    err('get_combo_value opcode ' + int_to_str(operand))
end

fn print(d: Data) 
    if d.ip >= len(d.instructions) {
        v = 0
    } else {
        v = d.instructions[d.ip + 1]
    }
    log('A=', d.a, 'B=', d.b, 'C=', d.c, 'ip=', d.ip, 'value=', v, 'combo=', get_combo_value(d, v), 'out:', d.out)
    //log('instructions:', len(d.instructions))
    //log('out:', d.out)
end

fn create_data(lines: [str])
    d = Data {}
    d.a = str_to_int(str_split(lines[0], ' ')[2])
    d.b = str_to_int(str_split(lines[1], ' ')[2])
    d.c = str_to_int(str_split(lines[2], ' ')[2])

    d.instructions = [int]
    for str_split(str_split(lines[4], ' ')[1], ',') {
        push(d.instructions, str_to_int(it))
    }

    ret d
end

fn print1(d: Data, cmd: str)
    log(cmd)
    print(d)
end

fn execute(d: Data)
    loop {
        if d.ip >= len(d.instructions) do break
        opcode = d.instructions[d.ip]
        operand = d.instructions[d.ip + 1]
        value = operand
        combo_value = get_combo_value(d, operand)

        /// adv
        if opcode = 0 {
            print1(d, 'adv')
            d.a = d.a/exp(2, combo_value)  
            d.ip = d.ip + 2
            continue
        }

        /// bxl 
        if opcode = 1 {
            print(d)
            log('bxl', 'B = B ^ value ::', d.b^value, '=', d.b, '^', value)
            d.b = d.b ^ value
            d.ip = d.ip + 2
            print(d)
            //readln()
            continue
        }

        /// bst 
        if opcode = 2 {
            print(d)
            d.b = combo_value % 8
            log('bst: B = combo % 8 ::', d.b, '=', combo_value, '% 8')
            d.ip = d.ip + 2
            print(d)
            log()
            //readln()
            continue
        }

        /// jnz
        if opcode = 3 {
            print1(d, 'jnz')
            if d.a > 0 {
                d.ip = value
            } else {
                d.ip = d.ip + 2
            }
            //readln()
            continue
        }

        /// bxc
        if opcode = 4 {
            print1(d, 'bxc')
            d.b = d.b ^ d.c
            d.ip = d.ip + 2
            //readln()
            continue
        }

        /// out
        if opcode = 5 {
            print1(d, 'out')
            v = combo_value % 8
            if str_len(d.out) > 0 do d.out = d.out + ','
            d.out = d.out + int_to_str(v)
            d.ip = d.ip + 2
            //readln()
            continue
        }

        /// bdv
        if opcode = 6 {
            print1(d, 'bdv')
            d.b = d.a/exp(2, combo_value)  
            d.ip = d.ip + 2
            //readln()
            continue
        }

        /// cdv
        if opcode = 7 {
            print(d)
            d.c = d.a/exp(2, combo_value)  
            log('cdv', 'C = A div 2^combo ::', d.c, '=', d.a, 'div 2^', combo_value)
            d.ip = d.ip + 2
            print(d)
            //readln()
            continue
        }
    }
end

fn run
    lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
    d = create_data(lines)
    log(lines[4])
    execute(d)
    log('\ndone', d.out)
end
