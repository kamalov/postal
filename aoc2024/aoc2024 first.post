rec Data {
    x: int
    y: int
    dx: int
    dy: int
}

fn create_data(line: str)
    d = Data {}

    ps = str_split(str_split(line, ' ')[0], ',')
    x = str_split(ps[0], '=')[1]
    y = ps[1]
    d.x = str_to_int(x)
    d.y = str_to_int(y)

    vs = str_split(str_split(line, ' ')[1], ',')
    dx = str_split(vs[0], '=')[1]
    dy = vs[1]
    d.dx = str_to_int(dx)
    d.dy = str_to_int(dy)

    ret d
end

fn get_quadrant(d: Data)
    xlen = 101
    ylen = 103
    // xlen = 11
    // ylen = 7
    steps = 100

    mx = xlen / 2
    my = ylen / 2
    //log('mx', mx, 'my', my)

    x = (d.x + d.dx*steps) % xlen
    if x < 0 do x = x + xlen
    y = (d.y + d.dy*steps) % ylen
    if y < 0 do y = y + ylen

    if x = mx or y = my do ret 0

    if x > mx and y < my do ret 1
    if x < mx and y < my do ret 2
    if x < mx and y > my do ret 3
    if x > mx and y > my do ret 4

    ret 0
end

fn process(lines: [str])
    quadrants = [int]
    arr_set_len(quadrants, 5)
    for lines {
        data = create_data(it)
        i = get_quadrant(data)
        if i > 0 {
            quadrants[i] = quadrants[i] + 1
        }
    }

    total = 1
    for 1..4 {
        log(it, quadrants[it])
        total = total * quadrants[it]
    }
    ret total
end

fn run
   lines = read_string_lines_from_file('D:/src/postal/aoc2024/input.txt')
   total = process(lines)

   log('total = ', total)
end
