Postal (POST pascAL) programming language

Goal: easy syntax (like TypeScript), fast compilation (like Delphi), fast runtime (like C++)

Priorities (by desc):
1. Typed 
2. Memsafe
3. Run time     :: At least C++ runtime performance (speed and memory wise)
4. Compile time :: At least Free/Object Pascal compilation speed
5. Design time  :: At least TypeScript code writing speed (low friction)

Implementation

Phase zero (basic syntax and type checking):
-- features:
   -- type checking
   -- type inference
   -- refcounted memory management
   -- C++/Pascal hybrid syntax
   -- built-in dyn array and hash table
   -- structs only
-- limitations:
   -- transpilation to C++
   -- single source file
   -- ansi strings
   -- no nested built-in collections (i.e array of array, hashmap of array, etc.)

Phase zero.1:
-- generics
-- first class functions
-- function overload
-- scope variables
-- nested collections
-- iterators (+ mapping with >>)
...
-- enums
-- exceptions

Phase one:
-- multiple source files (modules)
-- utf-8 strings
-- some kind of dynamic dispatch and/or tagget unions
-- value types
-- standard library
-- language server

...

Phase pre-last (bells and whistles):
-- variant data type
-- better compile error messages
-- semantic block comment (clojure style)

Phase last (most likely will not be needed as transpilation to C++ should be enought):
-- for debug mode generate x64 native code (unoptimized) 
-- for production generate LLVM code 
-- debug mode compile speed (cold start) >= 100k loc per second
-- debug mode compile speed (hot) == instant (less than 0.1ms)
-- production mode compile speed >= 10k loc per second
