Post Pascal Programming Language (aka Postal) 

Goal: easy syntax (TypeScript like), fast compilation (Jai like), fast runtime (C like)

Priorities (by desc):
1. Typed 
2. Memsafe
3. Design time  :: Better than TypeScript code writing speed (and TypeScript is smooth)
4. Run time     :: Close to C runtime performance (speed and memory wise, with bump memory allocation)
5. Compile time :: Close to Jai compilation speed

Implementation

Phase zero (basic syntax and type checking, proof of concept):
-- features:
   -- type checking
   -- type inference
   -- refcounted memory management
   -- Pascal/C++ hybrid syntax
   -- built-in dyn array and hash table
   -- structs only
   -- transpilation to C++
-- limitations:
   -- no polymorpism
   -- single source file
   -- ansi strings
   -- no nested built-in collections (i.e. array of array, hashmap of array, etc.)

Phase one (critical):
-- declarative? bump memory allocation mechanizm (and probably value types). Never ever been done before? 
-- polymorphism (generics, tagget unions)
-- error handling mechanizm (exceptions or result or smth.)
-- transpilation to C99 (or C89, needs research)

Phase two (non critical):
-- function pointers
-- enums
-- global variables
-- nested collections
-- language server
...
-- multiple source files (modules?)
-- utf-8 strings
-- iterators (+ mapping with >>)
-- function overload
-- standard library

... 

Backlog:
-- better compile error messages
-- semantic block comment (clojure style)
-- scope variables
-- ??? variant data type
